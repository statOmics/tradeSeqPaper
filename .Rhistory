brewer.pal(12, "Set3")[c(7, 8, 12)],
brewer.pal(8, "Pastel2")[8], brewer.pal(11, "BrBG")[11],
brewer.pal(11, "PiYG")[1], "cyan", "darkblue", "darkorchid2",
"brown1", "springgreen1", "deepskyblue4", "darkolivegreen",
"antiquewhite2")
cell_type_color <- c("Basophils" = "#E088B8",
"Dendritic cells" = "#46C7EF",
"Eosinophls" = "#EFAD1E",
"Erythrocyte" = "#8CB3DF",
"Monocytes" = "#53C0AD",
"Multipotent progenitors" = "#4EB859",
"GMP" = "#D097C4",
"Megakaryocytes" = "#ACC436",
"Neutrophils" = "#F5918A",
'NA' = '#000080')
### no internet:  use data stored in tradeSeq package
#data(se,package="tradeSeq")
download.file(
"https://github.com/statOmics/tradeSeqPaper/raw/master/data/se_paul.rda",
destfile = "./se_paul.rda")
load("./se_paul.rda")
rd <- reducedDim(se)
set.seed(97)
cl <- kmeans(rd, centers = 7)$cluster
plot(rd, col = brewer.pal(9, "Set1")[cl], pch = 16, asp = 1)
library(slingshot)
lin <- getLineages(rd, clusterLabels = cl, start.clus = 4)
plot(rd, col = brewer.pal(9, "Set1")[cl], xlab = "UMAP1", ylab = "UMAP2")
lines(lin, lwd = 2)
crv <- getCurves(lin)
plot(rd, col = brewer.pal(9, "Set1")[cl], main = "color by cluster", xlab = "UMAP1", ylab = "UMAP2")
lines(crv, lwd = 2)
plot(rd, col = cell_type_color[colData(se)$cell_type2], main = "color by cell type", xlab = "UMAP1", ylab = "UMAP2", pch = 16)
lines(crv, lwd = 2)
counts <- as.matrix(assays(se)$counts)
######## tradeSeq analysis
library(mgcv)
library(tradeSeq)
# gamListPaul <- fitGAM(counts, pseudotime=slingPseudotime(crv,na=FALSE), cellWeights=slingCurveWeights(crv), verbose=TRUE, nknots=6)
load("~/data/gamListPaul_6k.rda")
# pattern test: 2558 genes
patternResPaul <- patternTest(gamListPaul)
sum(p.adjust(patternResPaul$pvalue, "fdr") <= 0.05, na.rm = TRUE)
patternGenes <- rownames(counts)[which(p.adjust(patternResPaul$pvalue, "fdr") <= 0.05)]
#### fitted values
library(clusterExperiment)
library(cluster)
library(scales)
resRSEC <- readRDS("~/resRSEC.rds")
clRSEC <- primaryCluster(resRSEC$rsec)
### graph-based distance based on gene ontology
rl <- readLines("~/Downloads/mgi.gaf")
rl <- rl[-c(1:43)]
rl <- lapply(rl, function(x) strsplit(x, split="\t")[[1]])
geneID <- unlist(lapply(rl, function(x) x[3]))
goID <- unlist(lapply(rl, function(x) x[5]))
goMapping <- data.frame(gene=geneID, go=goID)
goMapping <- goMapping[goMapping$gene %in% patternGenes,]
uniqGO <- unique(goMapping$go)
goList <- sapply(uniqGO, function(term){
goMapping$gene[goMapping$go %in% term]
})
names(goList) <- uniqGO
barplot(table(lapply(goList, length)))
table(lapply(goList, length))
goList[[1]]
goList[[2]]
goList[[3]]
lapply(goList[1:2], length)
lapply(goList[1:5], length)
barplot(table(unlist(lapply(goList, length))))
length(patternGenes)
sort(table(unlist(lapply(goList, length))))
sort(unlist(lapply(goList, length)))
head(sort(unlist(lapply(goList, length)), decreasing=TRUE))
clRSEC
patternGenes[clRSEC==1]
cl1 = patternGenes[clRSEC==1]
cl1
hist(unlist(lapply(goList, function(x) mean(cl1 %in% x))), breaks=20)
max(unlist(lapply(goList, function(x) mean(cl1 %in% x))), breaks=20)
max(unlist(lapply(goList, function(x) mean(cl1 %in% x)))
)
## same number of clusters with PAM.
set.seed(882)
yhatScaled <- resRSEC$yhatScaled
resPam <- cluster::pam(x=yhatScaled, k=length(unique(clRSEC))-1)
clPam <- resPam$clustering
nClusRSEC <- length(unique(clRSEC))-1
maxOverlapsRSEC <- sapply(1:nClusRSEC, function(clust){
clx <- patternGenes[clRSEC == clust]
max(unlist(lapply(goList, function(x) mean(clx %in% x))))
})
hist(maxOverlapsRSEC, breaks=20)
clPam <- resPam$clustering
maxOverlapsPam <- sapply(1:nClusRSEC, function(clust){
clx <- patternGenes[clPam == clust]
max(unlist(lapply(goList, function(x) mean(clx %in% x))))
})
hist(maxOverlapsPam, breaks=20)
hist(maxOverlapsRSEC, breaks=20)
hist(maxOverlapsPam, breaks=20, add=TRUE, col=alpha("steelblue", .4))
boxplot(cbind(maxOverlapsPam, maxOverlapsRSEC))
# hlp <- cherry::construct(goList)
barplot(table(unlist(lapply(goList, length))))
which(unlist(lapply(goList, length)))==1)
which(unlist(lapply(goList, length))==1)
goList[[4305]]
# hlp <- cherry::construct(goList)
listLengths <- unlist(lapply(goList, length))
## filter and make DAG
keep <- listLengths >= 5 & listLengths < 1000
table(keep)
goList <- goList[keep]
hlp <- cherry::construct(goList)
istwoway(hlp)
cherry::istwoway(hlp)
## filter and make DAG
keep <- listLengths >= 5 #& listLengths < 1000
goList <- sapply(uniqGO, function(term){
goMapping$gene[goMapping$go %in% term]
})
names(goList) <- uniqGO
keep <- listLengths >= 5 #& listLengths < 1000
goListFiltered <- goList[keep]
hlp <- cherry::construct(goList)
## filter and make DAG
goList[[length(goList)+1]] <- patternGenes
keep <- listLengths >= 5 #& listLengths < 1000
goListFiltered <- goList[keep]
hlp <- cherry::construct(goList)
hlp <- cherry::construct(goListFiltered)
cl1
## start implementation
clust- <- 1
clx <- patternGenes[clRSEC == clust]
## start implementation
clust <- 1
clx <- patternGenes[clRSEC == clust]
cl
clx
sum(unlist(lapply(goList, function(x) "Ybx1" %in% x)))
class(glBoot)
## the silhouette value is biased to k-means / PAM since it's based on the same distance.
## a non-parametric approach would be to use bootstrapping.
pt <- slingPseudotime(crv,na=FALSE)
cw <- slingCurveWeights(crv)
## bootstrap cells
bootCells <- sample(1:ncol(counts), replace=TRUE)
ptBoot <- pt[bootCells,]
cwBoot <- cw[bootCells,]
countsBoot <- counts[,bootCells]
## refit tradeSeq
glBoot <- fitGAM(countsBoot, pseudotime=ptBoot, cellWeights=cwBoot,
verbose=TRUE, nknots=6)
## cluster using RSEC
rsecBoot <- clusterExpressionPatterns(glBoot, nPoints=100, genes=patternGenes)
rm(hlp)
## cluster using PAM
yhatBoot <- rsecBoot$yhatScaled
pamBoot <- cluster::pam(yhatBoot, k=length(unique(clRSEC))-1)
??adjustedRandIndex
mclust::adjustedRandIndex(primaryCluster(rsecBoot$rsec),
primaryCluster(primaryCluster(resRSEC$rsec)))
mclust::adjustedRandIndex(resPam$clustering,
pamBoot$clustering)
primaryCluster(rsecBoot$rsec)
mclust::adjustedRandIndex(primaryCluster(rsecBoot$rsec),
primaryCluster(resRSEC$rsec))
mclust::adjustedRandIndex(resPam$clustering,
pamBoot$clustering)
rm(list=ls())
setwd("~/Dropbox/compomicsVM/brainstat/hbcRegen/")
#setwd("/home/compomics/Dropbox/compomicsVM/brainstat/hbcRegen/")
here::set_here()
suppressPackageStartupMessages({
library(slingshot)
library(tradeSeq)
library(SingleCellExperiment)
library(cowplot)
library(rgl)
library(clusterExperiment)
library(RColorBrewer)
library(aggregation)
library(ggplot2)
library(pheatmap)
library(wesanderson)
})
sds <- readRDS("slingshot_OE.rds")
load("regenK5_scone_none,fq,ruv_k=1,no_bio,batch_rsec_adjP_mergecutoff_0.01_20190609_085359.Rda")
subset <- readRDS("subset_index.rds")
load("ALL_TF.Rda")
cl <- colnames(sds@clusterLabels)[apply(sds@clusterLabels,1,which.max)]
batch <- droplevels(colData(cl2)$batch[subset])
# # data should have been quantile normalized, but wouldnt we expect all LS to be equal?
# hist(colSums(assays(cl2)$counts), breaks=100)
#
# #
# plot(density(log1p(assays(cl2)$counts[,1])), type='n')
# for(ii in 1:9) lines(density(log1p(assays(cl2)$counts[,ii])), col=ii)
#
plot3d(reducedDim(cl2)[subset,1:3], aspect = 'iso', col=brewer.pal(9,'Set1')[factor(cl)], alpha=.3)
for(i in 1:4){
rgl::plot3d(sds@curves[[i]]$s[, 1:3], type = "l", add = TRUE, lwd = 4, col = "black")
}
offsetHBC <- rep(log(1), length(subset))
# sce <- fitGAM(assays(cl2)$counts[,subset],
#               sds = sds,
# 		          U = NULL,
#               nknots = 7, offset=offsetHBC,
#               parallel = FALSE)
#saveRDS(sce, file="/home/compomics/Dropbox/compomicsVM/brainstat/hbcRegen/sce_noOffset.rds")
sce <- readRDS("sce_noOffset_noBatch.rds")
# labels for plots
labels <- c("Neur", "rHBC", "Sus", "MV")
names(labels) <- as.character(1:4)
source("~/Dropbox/research/PhD/Research/singleCell/trajectoryInference/trajectoryDE/tradeSeq/R/utils.R")
epsilon <- 1e-6
calculateDerivatives <- function(sce, gene, lineage, epsilon=1e-6, nPoints=200){
## gather all required objects
id <- which(rownames(sce) == gene)
beta <- matrix(unlist(rowData(sce)$tradeSeq$beta[id,]),ncol=1)
Sigma <- rowData(sce)$tradeSeq$Sigma[[id]]
X <- colData(sce)$tradeSeq$X
slingshotColData <- colData(sce)$slingshot
pseudotime <- slingshotColData[,grep(x = colnames(slingshotColData),
pattern = "pseudotime")]
dm <- colData(sce)$tradeSeq$dm
## calculate lp matrix with finite differencing
newd1 <- .getPredictRangeDf(dm, lineage, nPoints=nPoints)
newd2 <- newd1
newd1[,paste0("t",lineage)] <- newd1[,paste0("t",lineage)] - epsilon
X0 <- predictGAM(X, newd1, pseudotime)
newd2[,paste0("t",lineage)] <- newd2[,paste0("t",lineage)] + epsilon
X1 <- predictGAM(X, newd2, pseudotime)
Xp <- (X1-X0)/(2*epsilon) ## maps coefficients to (fd approx.) derivatives
## calculate first derivative
df <- Xp%*%beta              ## ith smooth derivative
df.sd <- rowSums(Xp%*%Sigma*Xp)^.5 ## cheap diag(Xi%*%b$Vp%*%t(Xi))^.5
dfsd <- data.frame(der=df, sdDer=df.sd)
colnames(dfsd) <- c(paste0("der",lineage), paste0("sdDer",lineage))
return(dfsd)
}
calculateDerivativesWithSigma <- function(sce, gene, lineage, epsilon=1e-6, nPoints=200){
## gather all required objects
id <- which(rownames(sce) == gene)
beta <- matrix(unlist(rowData(sce)$tradeSeq$beta[id,]),ncol=1)
Sigma <- rowData(sce)$tradeSeq$Sigma[[id]]
X <- colData(sce)$tradeSeq$X
slingshotColData <- colData(sce)$slingshot
pseudotime <- slingshotColData[,grep(x = colnames(slingshotColData),
pattern = "pseudotime")]
dm <- colData(sce)$tradeSeq$dm
## calculate lp matrix with finite differencing
newd1 <- .getPredictRangeDf(dm, lineage, nPoints=nPoints)
newd2 <- newd1
newd1[,paste0("t",lineage)] <- newd1[,paste0("t",lineage)] - epsilon
X0 <- predictGAM(X, newd1, pseudotime)
newd2[,paste0("t",lineage)] <- newd2[,paste0("t",lineage)] + epsilon
X1 <- predictGAM(X, newd2, pseudotime)
Xp <- (X1-X0)/(2*epsilon) ## maps coefficients to (fd approx.) derivatives
## calculate first derivative
df <- Xp%*%beta              ## ith smooth derivative
#df.sd <- rowSums(Xp%*%Sigma*Xp)^.5 ## cheap diag(Xi%*%b$Vp%*%t(Xi))^.5
sigmaDer <- Xp%*%Sigma%*%t(Xp)
dfsd <- list(der=df, sdDer=sigmaDer)
names(dfsd) <- c(paste0("der",lineage), paste0("sdDer",lineage))
return(dfsd)
}
plotSmoothersWithDerivatives <- function(sce, gene, counts, gridDf, derDf){
dfAll <- as.data.frame(cbind(gridDf,derDf))
cowplot::plot_grid(
#smoothers
plotSmoothers(sce, gene=gene, counts=counts, lwd=1),
ggplot(dfAll, aes(x=grid1, y=derDf$der1)) +
geom_line() +
geom_line(aes(x=grid1, y=derDf$der1 - 2*derDf$sdDer1), lty=2) +
geom_line(aes(x=grid1, y=derDf$der1 + 2*derDf$sdDer1), lty=2) +
geom_hline(yintercept=0, col="red") +
ggtitle("Neuronal lineage") +
ylab("First derivative"),
ggplot(dfAll, aes(x=grid2, y=derDf$der2)) +
geom_line() +
geom_line(aes(x=grid2, y=derDf$der2 - 2*derDf$sdDer2), lty=2) +
geom_line(aes(x=grid2, y=derDf$der2 + 2*derDf$sdDer2), lty=2) +
geom_hline(yintercept=0, col="red") +
ggtitle("rHBC lineage") +
ylab("First derivative"),
# test statistics
ggplot(dfAll, aes(x=grid1, y=derDf$der1/derDf$sdDer1)) +
geom_line() +
geom_line(aes(x=grid2, y=derDf$der2/derDf$sdDer2)) +
geom_line(aes(x=grid3, y=derDf$der3/derDf$sdDer3)) +
geom_line(aes(x=grid4, y=derDf$der4/derDf$sdDer4)) +
geom_hline(yintercept=0, col="red") +
ggtitle("Test statistics"),
ggplot(dfAll, aes(x=grid3, y=derDf$der3)) +
geom_line() +
geom_line(aes(x=grid3, y=derDf$der3 - 2*derDf$sdDer3), lty=2) +
geom_line(aes(x=grid3, y=derDf$der3 + 2*derDf$sdDer3), lty=2) +
geom_hline(yintercept=0, col="red") +
ggtitle("SUS lineage") +
ylab("First derivative"),
ggplot(dfAll, aes(x=grid4, y=derDf$der4)) +
geom_line() +
geom_line(aes(x=grid4, y=derDf$der4 - 2*derDf$sdDer4), lty=2) +
geom_line(aes(x=grid4, y=derDf$der4 + 2*derDf$sdDer4), lty=2) +
geom_hline(yintercept=0, col="red") +
ggtitle("MV lineage") +
ylab("First derivative"),
nrow=2, ncol=3
)
}
makeGSEATable <- function(overlapFile, nBP=20){
overlap <- readLines(overlapFile)
overlapSets <- overlap[10:30]
overlapSetsSplit <- sapply(overlapSets, function(x) strsplit(x, split = "\t"))
gsNames <- unname(unlist(lapply(overlapSetsSplit, "[[", 1)))
genesInSet <- unname(unlist(lapply(overlapSetsSplit, "[[", 2)))
genesInOverlap <- unname(unlist(lapply(overlapSetsSplit, "[[", 4)))
pvalUniqGam <- unname(unlist(lapply(overlapSetsSplit, "[[", 6)))
qval <- unname(unlist(lapply(overlapSetsSplit, "[[", 7)))
gsNames <- tolower(gsNames)
gsNames <- gsub(x = gsNames, pattern = "_", replacement = " ")
gsNames[-1] <- unname(sapply(gsNames[-1], function(x) substr(x, 4, nchar(x))))
tab <- data.frame(
geneSet = gsNames[-1],
overlap = as.numeric(genesInOverlap[-1]),
genesInSet = as.numeric(genesInSet[-1]),
qvalue = qval[-1]
)
#library(xtable)
#print(xtable(tab), type="html")
return(tab)
}
tf <- intersect(ALL_TF, rownames(sce))
write.table(tf, "GSEA/tfLookedAt.txt", quote=FALSE,
row.names=FALSE, col.names=FALSE)
# derAllTF <- list()
# for(ii in 1:length(tf)){
#   gene <- tf[ii]
#   derGene <- do.call(cbind, sapply(1:4, function(ll){
#     calculateDerivatives(sce=sce,
#                         gene=gene,
#                         lineage=ll)
#   }, simplify=FALSE))
#   derAllTF[[ii]] <- derGene
# }
# saveRDS(derAllTF, file="derAllTF.rds")
derAllTF <- readRDS("derAllTF.rds")
names(derAllTF) <- tf
# identify relevant pseudotime range for each lineage
dm <- colData(sce)$tradeSeq$dm
nPoints <- 200
grid1 <- tradeSeq:::.getPredictRangeDf(dm, 1, nPoints)
id1 <- which(grid1$t1 > 5 & grid1$t1 < 60)
grid2 <- tradeSeq:::.getPredictRangeDf(dm, 2, nPoints)
id2 <- which(grid2$t2 > 5 & grid2$t2 < 60)
grid3 <- tradeSeq:::.getPredictRangeDf(dm, 3, nPoints)
id3 <- which(grid3$t3 > 5 & grid3$t3 < 60)
grid4 <- tradeSeq:::.getPredictRangeDf(dm, 4, nPoints)
id4 <- which(grid4$t4 > 5 & grid4$t4 < 60)
maxDers <- matrix(NA, nrow=length(tf), ncol=4)
rownames(maxDers) <- tf
for(ii in 1:length(tf)){
gene <- tf[ii]
derTests <- sapply(1:4, function(ll){
rr <- (2*ll-1):(2*ll) #range for the lineage
stat <- derAllTF[[gene]][get(paste0("id",ll)),rr[1]] / derAllTF[[gene]][get(paste0("id",ll)),rr[2]] #test statistic
return(stat)
})
maxDers[ii,] <- unlist(lapply(derTests, max))
}
ooTF <- order(apply(maxDers,1,min), decreasing=TRUE)
# labels for plots
labels <- c("Neur", "rHBC", "Sus", "MV")
names(labels) <- as.character(1:4)
# grid object for plots
gridDf <- data.frame(grid1=grid1$t1, grid2=grid2$t2, grid3=grid3$t3,
grid4=grid4$t4)
ii <- 0
while(ii < 5){
ii <- ii+1
gene = rownames(maxDers)[ooTF[ii]]
#print(suppressMessages(plotSmoothers(sce, gene=gene, counts=assays(cl2)$counts[,subset]) +
#ggtitle(gene) +
#scale_color_viridis_d(labels=labels, alpha=1)))
print(plotSmoothersWithDerivatives(sce, gene=gene,
counts=assays(cl2)$counts[,subset],
gridDf=gridDf,
derDf=derAllTF[[gene]]))
}
p1 <- plot_grid(ggCycle + coord_fixed() + theme(rect =element_blank()),
ggdraw() +
draw_image("~/Dropbox/research/PhD/research/singleCell/trajectoryInference/trajectoryDE/plots/wesandersonColorLegendVertical.png",
scale = 1),
ggBif + coord_fixed() + theme(rect =element_blank()), NULL,
ggMulti + coord_fixed() + theme(rect =element_blank()),
pCycle + coord_fixed() + theme(rect =element_blank()), NULL,
pDyntoyBif + coord_fixed() + theme(rect =element_blank()), NULL,
pMulti + coord_fixed() + theme(rect =element_blank()),
nrow = 2, ncol = 5, rel_heights = c(0.8, 1),
rel_widths = c(1, 0.3, 1, 0.3, 1),
labels = c("a", "", "b", "", "c", "d", "", "e", "", "f")
)
p1
source('~/Dropbox/research/PhD/research/singleCell/trajectoryInference/trajectoryDE/tradeSeqPaper/simulation/performancePlots/performanceTIPlot_all_v2IncludingEdgeR.R')
p2
ggsave("~/Dropbox/research/PhD/research/singleCell/trajectoryInference/trajectoryDE/tradeSeqPaper/simulation/performancePlots/simPerformance_hector.pdf", width = unit(15, "in"), height = unit(10, "in"), scale = .7)
#### Hector plot
p1 <- plot_grid(ggCycle + coord_fixed() + theme(rect =element_blank()),
ggdraw() +
draw_image("~/Dropbox/research/PhD/research/singleCell/trajectoryInference/trajectoryDE/plots/wesandersonColorLegendVertical.png",
scale = 1)  + theme(rect =element_blank()),
ggBif + coord_fixed() + theme(rect =element_blank()), NULL,
ggMulti + coord_fixed() + theme(rect =element_blank()),
pCycle + coord_fixed() + theme(rect =element_blank()), NULL,
pDyntoyBif + coord_fixed() + theme(rect =element_blank()), NULL,
pMulti + coord_fixed() + theme(rect =element_blank()),
nrow = 2, ncol = 5, rel_heights = c(0.8, 1),
rel_widths = c(1, 0.3, 1, 0.3, 1),
labels = c("a", "", "b", "", "c", "d", "", "e", "", "f")
)
p1
p2 <- plot_grid(p1, legend_all  + theme(rect =element_blank()), ncol = 1, rel_heights = c(1, .25))
p2
ggsave("~/Dropbox/research/PhD/research/singleCell/trajectoryInference/trajectoryDE/tradeSeqPaper/simulation/performancePlots/simPerformance_hector.pdf", width = unit(15, "in"), height = unit(10, "in"), scale = .7)
#### Hector plot
p1 <- plot_grid(ggCycle + coord_fixed() + theme(rect =element_blank()),
ggdraw() +
draw_image("~/Dropbox/research/PhD/research/singleCell/trajectoryInference/trajectoryDE/plots/wesandersonColorLegendVertical.png",
scale = 1)  + theme(rect =element_blank()),
ggBif + coord_fixed() + theme(rect =element_blank()), NULL,
ggMulti + coord_fixed() + theme(rect =element_blank()),
pCycle + coord_fixed() + theme(rect =element_blank()), NULL,
pDyntoyBif + coord_fixed() + theme(rect =element_blank()), NULL,
pMulti + coord_fixed() + theme(rect =element_blank()),
nrow = 2, ncol = 5, rel_heights = c(0.8, 1),
rel_widths = c(1, 0.3, 1, 0.3, 1),
labels = c("a", "", "b", "", "c", "d", "", "e", "", "f")
)
p1
p2 <- plot_grid(p1, legend_all, ncol = 1, rel_heights = c(1, .25))
p2
ggsave("~/Dropbox/research/PhD/research/singleCell/trajectoryInference/trajectoryDE/tradeSeqPaper/simulation/performancePlots/simPerformance_hector.pdf", width = unit(15, "in"), height = unit(10, "in"), scale = .7)
ggsave("~/Dropbox/research/PhD/research/singleCell/trajectoryInference/trajectoryDE/tradeSeqPaper/simulation/performancePlots/simPerformance_hector.pdf", width = unit(15, "in"), height = unit(10, "in"), scale = .7)
#### Hector plot
p1 <- plot_grid(ggCycle + coord_fixed() + theme(rect =element_blank()),
#ggdraw() +
# draw_image("~/Dropbox/research/PhD/research/singleCell/trajectoryInference/trajectoryDE/plots/wesandersonColorLegendVertical.png",
#           scale = 1)  + theme(rect =element_blank()),
NULL,
ggBif + coord_fixed() + theme(rect =element_blank()), NULL,
ggMulti + coord_fixed() + theme(rect =element_blank()),
pCycle + coord_fixed() + theme(rect =element_blank()), NULL,
pDyntoyBif + coord_fixed() + theme(rect =element_blank()), NULL,
pMulti + coord_fixed() + theme(rect =element_blank()),
nrow = 2, ncol = 5, rel_heights = c(0.8, 1),
rel_widths = c(1, 0.3, 1, 0.3, 1),
labels = c("a", "", "b", "", "c", "d", "", "e", "", "f")
)
p1
p2 <- plot_grid(p1, legend_all, ncol = 1, rel_heights = c(1, .25))
p2
ggsave("~/Dropbox/research/PhD/research/singleCell/trajectoryInference/trajectoryDE/tradeSeqPaper/simulation/performancePlots/simPerformance_hector.pdf", width = unit(15, "in"), height = unit(10, "in"), scale = .7)
pAll <- ggplot(full_join(CyclePlot, bifPlot),
aes(x = FDP, y = TPR, col = method)) +
geom_path(size = 1, aes(linetype = method)) +
scale_color_manual(values = cols, breaks = names(cols)) +
scale_linetype_manual(values = linetypes, breaks = names(linetypes)) +
theme(rect =element_blank())
legend_all <- get_legend(pAll + labs(col = "", linetype = "") +
theme(legend.position = "bottom",
legend.key.width = unit(1.3, "cm")) +
guides(col=guide_legend(nrow=3)))
#### Hector plot
p1 <- plot_grid(ggCycle + coord_fixed() + theme(rect =element_blank()),
#ggdraw() +
# draw_image("~/Dropbox/research/PhD/research/singleCell/trajectoryInference/trajectoryDE/plots/wesandersonColorLegendVertical.png",
#           scale = 1)  + theme(rect =element_blank()),
NULL,
ggBif + coord_fixed() + theme(rect =element_blank()), NULL,
ggMulti + coord_fixed() + theme(rect =element_blank()),
pCycle + coord_fixed() + theme(rect =element_blank()), NULL,
pDyntoyBif + coord_fixed() + theme(rect =element_blank()), NULL,
pMulti + coord_fixed() + theme(rect =element_blank()),
nrow = 2, ncol = 5, rel_heights = c(0.8, 1),
rel_widths = c(1, 0.3, 1, 0.3, 1),
labels = c("a", "", "b", "", "c", "d", "", "e", "", "f")
)
p1
p2 <- plot_grid(p1, legend_all, ncol = 1, rel_heights = c(1, .25))
p2
#### Hector plot
p1 <- plot_grid(ggCycle + coord_fixed() + theme(rect =element_blank()),
#ggdraw() +
# draw_image("~/Dropbox/research/PhD/research/singleCell/trajectoryInference/trajectoryDE/plots/wesandersonColorLegendVertical.png",
#           scale = 1)  + theme(rect =element_blank()),
NULL,
ggBif + coord_fixed() + theme(rect =element_blank()), NULL,
ggMulti + coord_fixed() + theme(rect =element_blank()),
pCycle + coord_fixed() + theme(rect =element_blank()), NULL,
pDyntoyBif + coord_fixed() + theme(rect =element_blank()), NULL,
pMulti + coord_fixed() + theme(rect =element_blank()),
nrow = 2, ncol = 5, rel_heights = c(0.8, 1),
rel_widths = c(1, 0.3, 1, 0.3, 1),
labels = c("a", "", "b", "", "c", "d", "", "e", "", "f")
)
p1
p2 <- plot_grid(p1, legend_all, ncol = 1, rel_heights = c(1, .25))
p2
ggsave("~/Dropbox/research/PhD/research/singleCell/trajectoryInference/trajectoryDE/tradeSeqPaper/simulation/performancePlots/simPerformance_hector.pdf", width = unit(15, "in"), height = unit(10, "in"), scale = .7)
