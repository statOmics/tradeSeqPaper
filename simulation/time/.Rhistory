library(here)
library(rafalib)
library(wesanderson)
library(profvis)
library(tidyverse)
install.packages("profvis")
library(profvis)
palette(wes_palette("Darjeeling1", 10, type = "continuous"))
palette(wes_palette("Darjeeling1", 10, type = "continuous"))
size="small"
## Benchmark time ----
time_benchmark <- read.table(
file = here::here("simulation", "time", paste0(size, "-time-benchmark.txt")))
time_benchmark <- time_benchmark %>%
mutate(expr = case_when(str_detect(expr, "edgeR") ~ "edgeR",
str_detect(expr, "fitGAM") ~ "tradeSeq",
str_detect(expr, "BEAM") ~ "BEAM",
str_detect(expr, "ImpulseDE2") ~ "ImpulseDE2"),
time = duration(round(time / 60^5,2), units = "seconds")) %>%
group_by(expr) %>%
summarise(min = duration(min(time), units = "seconds"),
firstQuartile = quantile(time, 0.25),
median = duration(median(time), units = "seconds"),
mean = duration(mean(time), units = "seconds"),
thirdQuartile = quantile(time, 0.75),
max = duration(max(time), units = "seconds"))
library(here)
library(rafalib)
library(wesanderson)
library(profvis)
library(tidyverse)
time_benchmark <- time_benchmark %>%
mutate(expr = case_when(str_detect(expr, "edgeR") ~ "edgeR",
str_detect(expr, "fitGAM") ~ "tradeSeq",
str_detect(expr, "BEAM") ~ "BEAM",
str_detect(expr, "ImpulseDE2") ~ "ImpulseDE2"),
time = duration(round(time / 60^5,2), units = "seconds")) %>%
group_by(expr) %>%
summarise(min = duration(min(time), units = "seconds"),
firstQuartile = quantile(time, 0.25),
median = duration(median(time), units = "seconds"),
mean = duration(mean(time), units = "seconds"),
thirdQuartile = quantile(time, 0.75),
max = duration(max(time), units = "seconds"))
??duration
library(lubridate)
time_benchmark <- time_benchmark %>%
mutate(expr = case_when(str_detect(expr, "edgeR") ~ "edgeR",
str_detect(expr, "fitGAM") ~ "tradeSeq",
str_detect(expr, "BEAM") ~ "BEAM",
str_detect(expr, "ImpulseDE2") ~ "ImpulseDE2"),
time = duration(round(time / 60^5,2), units = "seconds")) %>%
group_by(expr) %>%
summarise(min = duration(min(time), units = "seconds"),
firstQuartile = quantile(time, 0.25),
median = duration(median(time), units = "seconds"),
mean = duration(mean(time), units = "seconds"),
thirdQuartile = quantile(time, 0.75),
max = duration(max(time), units = "seconds"))
?case_when
?summaryRprof
summaryRprof(filename = here::here("simulation", "time",
paste0(size, "-fitGam-memory.Rprof")),
memory = "both", lines = "show")$by.line[, "mem.total"]
summaryRprof(filename = here::here("simulation", "time",
paste0(size, "-ImpulseDE-memory.Rprof")),
memory = "both", lines = "show", chunksize = 10000)
90749.8/60
90749.8/360
summaryRprof(filename = here::here("simulation", "time",
paste0(size, "-edgeR-memory.Rprof")),
memory = "both", lines = "show")$by.line[, "mem.total"]
30/815
815/30
rm(list=ls())
library(monocle)
library(monocle)
library(DESeq2)
library(RColorBrewer)
library(mgcv)
library(slingshot)
library(tradeSeq)
library(microbenchmark)
library(edgeR)
library(here)
library(rafalib)
library(wesanderson)
library(BiocParallel)
library(doParallel)
library(profvis)
library(ImpulseDE2)
library(monocle)
library(DESeq2)
library(RColorBrewer)
library(mgcv)
library(slingshot)
library(tradeSeq)
library(microbenchmark)
library(edgeR)
library(here)
library(rafalib)
library(wesanderson)
library(BiocParallel)
library(doParallel)
library(profvis)
library(ImpulseDE2)
install.packages("microbenchmark")
## Pre-process ----
NCORES <- 2
palette(wes_palette("Darjeeling1", 10, type = "continuous"))
source(here("simulation", "time", "20190611_helper.R"))
FQnorm <- function(counts) {
rk <- apply(counts, 2, rank, ties.method = "min")
counts.sort <- apply(counts, 2, sort)
refdist <- apply(counts.sort, 1, median)
norm <- apply(rk, 2, function(r) {
refdist[r]
})
rownames(norm) <- rownames(counts)
return(norm)
}
## Pre-process ----
NCORES <- 2
palette(wes_palette("Darjeeling1", 10, type = "continuous"))
source(here("simulation", "time", "20190611_helper.R"))
source(here::here("simulation", "time", "20190611_helper.R"))
FQnorm <- function(counts) {
rk <- apply(counts, 2, rank, ties.method = "min")
counts.sort <- apply(counts, 2, sort)
refdist <- apply(counts.sort, 1, median)
norm <- apply(rk, 2, function(r) {
refdist[r]
})
rownames(norm) <- rownames(counts)
return(norm)
}
size="small"
## pre-process ----
dataset <- readRDS(paste0(here("simulation", "time",
paste0(size, "DyntoyDataset.rds"))))
## pre-process ----
dataset <- readRDS(paste0(here::here("simulation", "time",
paste0(size, "DyntoyDataset.rds"))))
counts <- t(dataset$counts)
# get milestones
gid <- dataset$prior_information$groups_id
gid <- gid[match(colnames(counts), gid$cell_id), ]
pal <- wes_palette("Zissou1", 12, type = "continuous")
truePseudotime <- dataset$prior_information$timecourse_continuous
g <- Hmisc::cut2(truePseudotime, g = 12)
# quantile normalization
normCounts <- round(FQnorm(counts))
## Running slingshot ----
## dim red
pca <- prcomp(log1p(t(normCounts)), scale. = FALSE)
rd <- pca$x[, 1:3]
## cluster
cl <- as.factor(gid$group_id)
rafalib::mypar(mfrow = c(1, 2))
plot(rd, col = brewer.pal(8, "Dark2")[as.numeric(as.factor(gid$group_id))],
pch = 16, asp = 1)
legend("topright", paste0("M", 1:length(unique(gid$group_id))), col = 1:4, pch = 16)
plot(rd, col = pal[g], pch = 16, asp = 1)
# lineages
lin <- getLineages(rd, as.numeric(cl), start.clus = 1,
end.clus = c(2, 4))
plot(rd, col = pal[g], pch = 16, asp = 1)
lines(lin, lwd = 2)
# curves
crv <- getCurves(lin)
plot(rd, col = pal[g], pch = 16, asp = 1)
lines(crv, lwd = 2, col = "black")
## Monocle BEAM analysis ----
### Monocle 2 BEAM analysis
trueWeights <- getWeightsBifurcation(dataset, crv)
featureInfo <- data.frame(gene_short_name = rownames(counts))
rownames(featureInfo) <- rownames(counts)
fd <- new("AnnotatedDataFrame", featureInfo)
cds <- newCellDataSet(cellData = normCounts, featureData = fd,
expressionFamily = negbinomial.size())
cds <- estimateSizeFactors(cds)
detach("package:monocle",unload=TRUE)
library(monocle,lib.loc="~/Dropbox/PhD/Research/singleCell/trajectoryInference/trajectoryDE/methodsPaper/")
## Monocle BEAM analysis ----
### Monocle 2 BEAM analysis
trueWeights <- getWeightsBifurcation(dataset, crv)
featureInfo <- data.frame(gene_short_name = rownames(counts))
rownames(featureInfo) <- rownames(counts)
fd <- new("AnnotatedDataFrame", featureInfo)
cds <- newCellDataSet(cellData = normCounts, featureData = fd,
expressionFamily = negbinomial.size())
cds <- estimateSizeFactors(cds)
cds <- estimateDispersions(cds)
cds <- reduceDimension(cds, reduction_method = "ICA")
cds <- orderCells(cds)
set.seed(11)
branch <- rep(NA, ncol(counts))
branch[trueWeights[, 1] == 1] <- "A"
branch[trueWeights[, 2] == 1] <- "B"
branch[is.na(branch)] <- c("A", "B")[sample(1:2, size = sum(is.na(branch)), replace = TRUE)]
phenoData(cds)$Branch <- as.factor(branch)
phenoData(cds)$original_cell_id <- colnames(counts)
phenoData(cds)$Pseudotime <- truePseudotime
## tradeSeq  ----
### tradeSeq: fit smoothers on truth data
trueT <- matrix(truePseudotime, nrow = length(truePseudotime), ncol = 2, byrow = FALSE)
## edgeR ----
edgeR <- function(){
clF <- as.factor(cl)
design <- model.matrix(~clF)
d <- DGEList(counts)
d <- calcNormFactors(d)
d <- estimateDisp(d, design)
fit <- glmFit(d, design)
L <- matrix(0, nrow = ncol(fit$coefficients), ncol = 1)
rownames(L) <- colnames(fit$coefficients)
endClusters <- c(2, 4)
if (1 %in% endClusters) {
not1Cluster <- endClusters[!endClusters == 1]
L[not1Cluster,1] <- 1
} else {
L[endClusters,1] <- c(1,-1)
}
lrt <- glmLRT(fit, contrast = L)
}
## Impulse DE ----
gamModels <- fitGAM(as.matrix(counts)[1:10,], pseudotime = trueT,
cellWeights = trueWeights)
m <- gamList[[1]]
branch <- rep(NA, ncol(counts))
time <- rep(NA, ncol(counts))
branch[m$model$l1 == 1] <- "A"
time[m$model$l1 == 1] <- trueT[m$model$l1 == 1, 1]
branch[m$model$l2 == 1] <- "B"
time[m$model$l2 == 1] <- trueT[m$model$l2 == 1, 2]
condition <- ifelse(branch == "A", "control", "case")
# ImpulseDE2 cannot handle datasets where every gene contains at least one zero.
# since then it errors on the DESeq2 size factor estimation. Since the data is
# already quantile normalized, we provide a size factor of 1 as input.
sf <- rep(1, ncol(normCounts)) # data is already normalized
names(sf) <- colnames(normCounts)
# dfAnnotation
dfAnn <- data.frame(Sample = colnames(counts), Condition = condition, Time = time)
# Even with supplied size factors, it errors because it still attempts to calculate
# the size factors for dispersion estimation with DESeq2. Do it manually.
dds <- suppressWarnings(DESeqDataSetFromMatrix(
countData = round(normCounts),
colData = dfAnn,
design = ~ Condition + Condition:Time
))
dds <- estimateSizeFactors(dds, type = "poscounts")
dds <- estimateDispersions(dds)
## GPfates ----
logCpm <- edgeR::cpm(normCounts, prior.count=.125, log=TRUE)
sampleInfo <- data.frame(global_pseudotime=truePseudotime)
sampleInfo
rownames(sampleInfo) <- colnames(counts)
## GPfates ----
logCpm <- edgeR::cpm(normCounts, prior.count=.125, log=TRUE)
sampleInfo <- data.frame(global_pseudotime=truePseudotime)
rownames(sampleInfo) <- colnames(counts)
write.table(logCpm, file="./timeBenchLogCpm.txt", row.names=TRUE, col.names=TRUE, quote=FALSE)
write.table(sampleInfo, file="./timeBenchSampleInfo.txt", row.names=TRUE, col.names=TRUE, quote=FALSE)
system("python3 ./20190806_preprocessGPfatesTimeMemBenchmark.py")
system("python ./20190806_preprocessGPfatesTimeMemBenchmark.py")
system("python3 ./20190806_preprocessGPfatesTimeMemBenchmark.py")
time_benchmark <- microbenchmark(
#fitGAM(as.matrix(counts), pseudotime = trueT, cellWeights = trueWeights),
#BEAM_kvdb(cds, cores = 1),
#edgeR(),
#runImpulseDE2(matCountData = round(normCounts), dfAnnotation = dfAnn,
#              boolCaseCtrl = TRUE, vecSizeFactorsExternal = sf,
#              vecDispersionsExternal = vecDispersions, scaNProc = 2),
system("python3 ./20190806_analyzeGPfatesTimeBenchmark.py"),
times = 10L
)
summaryRprof(filename = here::here("simulation", "time",
paste0(size, "-edgeR-memory.Rprof")),
memory = "both", lines = "show")$by.line[, "mem.total"] %>%
print()
mem1 <- sapply(memGPfatesAll, strsplit, split="\t")
mem1 <- str_subset(mem1, "MiB")
maxUsage <- max(as.numeric(unname(sapply(mem1, substr, 10, 15))))
